"""Admin panel handlers"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.middlewares.admin import is_admin
from bot.database import Database
from config import config
import os
import logging

router = Router()
db = Database()
logger = logging.getLogger(__name__)

# Test handler - should be registered first
@router.message(Command("test_admin"))
async def test_admin_handler(message: Message):
    """Test handler to check if router works"""
    await message.answer(f"‚úÖ Test OK! Your ID: {message.from_user.id}")

class AdminStates(StatesGroup):
    waiting_yookassa_shop_id = State()
    waiting_yookassa_secret_key = State()
    waiting_webhook_secret = State()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """Admin panel main menu"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    admin_text = f"""
üîê **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å LinguaBot**

üë§ **–í–∞—à ID:** `{message.from_user.id}`
‚úÖ **–°—Ç–∞—Ç—É—Å:** –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

‚öôÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/admin_panel - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/admin_config - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/admin_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
/admin_logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤

üí≥ **–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YooKassa:**
‚Ä¢ Shop ID: `{config.YOOKASSA_SHOP_ID}`
‚Ä¢ Secret Key: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.YOOKASSA_SECRET_KEY != 'your_secret_key' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`
‚Ä¢ Webhook Secret: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.PAYMENT_WEBHOOK_SECRET != 'your_webhook_secret' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`
"""

    await message.answer(admin_text, parse_mode='Markdown')


@router.message(Command("admin_panel"))
async def open_admin_webapp(message: Message):
    """Open admin mini-app"""
    user_id = message.from_user.id
    logger.info(f"Admin panel command from user {user_id}, ADMIN_IDS: {config.ADMIN_IDS}")

    # Check admin rights
    if not is_admin(user_id):
        logger.warning(f"Access denied for user {user_id}")
        await message.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            f"–í–∞—à ID: `{user_id}`\n"
            f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: `{config.ADMIN_IDS}`\n\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_IDS",
            parse_mode='Markdown'
        )
        return

    logger.info(f"Admin access granted for user {user_id}")

    # Get the admin panel URL from config or use default
    admin_url = os.getenv("ADMIN_PANEL_URL", "http://localhost:8081")

    # Create inline keyboard with WebApp button
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîê –û—Ç–∫—Ä—ã—Ç—å Admin Panel",
            web_app=WebAppInfo(url=admin_url)
        )]
    ])

    try:
        await message.answer(
            "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n\n"
            "–í –ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
            "‚Ä¢ üåç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º\n\n"
            f"URL: {admin_url}",
            reply_markup=keyboard
        )
        logger.info(f"Admin panel opened for user {user_id}")
    except Exception as e:
        logger.error(f"Error opening admin panel: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@router.message(Command("admin_config"))
async def admin_config(message: Message, state: FSMContext):
    """Payment system configuration"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    config_text = f"""
üí≥ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã YooKassa**

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ Shop ID: `{config.YOOKASSA_SHOP_ID}`
‚Ä¢ Secret Key: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.YOOKASSA_SECRET_KEY != 'your_secret_key' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`
‚Ä¢ Webhook Secret: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.PAYMENT_WEBHOOK_SECRET != 'your_webhook_secret' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`

**–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**
/set_shop_id - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Shop ID
/set_secret_key - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Secret Key
/set_webhook_secret - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook Secret

**–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ YooKassa:**
https://yookassa.ru/
"""

    await message.answer(config_text, parse_mode='Markdown')

@router.message(Command("set_shop_id"))
async def set_shop_id(message: Message, state: FSMContext):
    """Set YooKassa Shop ID"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ Shop ID –æ—Ç YooKassa:")
    await state.set_state(AdminStates.waiting_yookassa_shop_id)

@router.message(AdminStates.waiting_yookassa_shop_id)
async def process_shop_id(message: Message, state: FSMContext):
    """Process Shop ID input"""
    shop_id = message.text.strip()

    if len(shop_id) < 5:
        await message.answer("‚ùå Shop ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # Update .env file
    update_env_var("YOOKASSA_SHOP_ID", shop_id)

    await message.answer(f"‚úÖ Shop ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{shop_id}`\n\n‚ö†Ô∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.", parse_mode='Markdown')
    await state.clear()

@router.message(Command("set_secret_key"))
async def set_secret_key(message: Message, state: FSMContext):
    """Set YooKassa Secret Key"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ Secret Key –æ—Ç YooKassa:")
    await state.set_state(AdminStates.waiting_yookassa_secret_key)

@router.message(AdminStates.waiting_yookassa_secret_key)
async def process_secret_key(message: Message, state: FSMContext):
    """Process Secret Key input"""
    secret_key = message.text.strip()

    if len(secret_key) < 10:
        await message.answer("‚ùå Secret Key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # Update .env file
    update_env_var("YOOKASSA_SECRET_KEY", secret_key)

    # Delete the message with secret key for security
    try:
        await message.delete()
    except:
        pass

    await message.answer("‚úÖ Secret Key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n‚ö†Ô∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
    await state.clear()

@router.message(Command("set_webhook_secret"))
async def set_webhook_secret(message: Message, state: FSMContext):
    """Set Webhook Secret"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ Webhook Secret:")
    await state.set_state(AdminStates.waiting_webhook_secret)

@router.message(AdminStates.waiting_webhook_secret)
async def process_webhook_secret(message: Message, state: FSMContext):
    """Process Webhook Secret input"""
    webhook_secret = message.text.strip()

    if len(webhook_secret) < 8:
        await message.answer("‚ùå Webhook Secret —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # Update .env file
    update_env_var("PAYMENT_WEBHOOK_SECRET", webhook_secret)

    # Delete the message with secret for security
    try:
        await message.delete()
    except:
        pass

    await message.answer("‚úÖ Webhook Secret —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n‚ö†Ô∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
    await state.clear()

@router.message(Command("admin_stats"))
async def admin_stats(message: Message):
    """Show bot statistics"""
    if not is_admin(message.from_user.id):
        return

    try:
        # Get stats from database
        total_users = await db.get_user_count()
        premium_users = await db.get_premium_user_count()

        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ü—Ä–µ–º–∏—É–º: {premium_users}
‚Ä¢ –û–±—ã—á–Ω—ã–µ: {total_users - premium_users}

üí≥ **–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if config.YOOKASSA_SHOP_ID != 'your_shop_id' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}

üîß **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –í–µ—Ä—Å–∏—è Python: 3.11
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite
‚Ä¢ –ê–¥–º–∏–Ω ID: {config.ADMIN_ID}
"""

        await message.answer(stats_text, parse_mode='Markdown')
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def update_env_var(key: str, value: str):
    """Update environment variable in .env file"""
    env_path = ".env"

    # Read current .env content
    with open(env_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    # Update or add the variable
    found = False
    for i, line in enumerate(lines):
        if line.startswith(f"{key}="):
            lines[i] = f"{key}={value}\n"
            found = True
            break

    if not found:
        lines.append(f"{key}={value}\n")

    # Write back to .env
    with open(env_path, 'w', encoding='utf-8') as f:
        f.writelines(lines)

    logger.info(f"Updated .env variable: {key}")