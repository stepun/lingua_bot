"""Export handlers"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.exceptions import TelegramBadRequest
import logging

from bot.database import db
from bot.services.export import ExportService
from bot.keyboards.inline import get_main_menu_keyboard, get_export_format_keyboard
from bot.utils.messages import get_text

logger = logging.getLogger(__name__)
router = Router()

export_service = ExportService()

@router.callback_query(F.data == "export_pdf")
async def export_pdf_handler(callback: CallbackQuery):
    """Export history to PDF"""
    user_info = await db.get_user(callback.from_user.id)

    if not user_info.get('is_premium'):
        await callback.answer("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏", show_alert=True)
        return

    # Show processing message
    await callback.message.edit_text("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF —Ñ–∞–π–ª...")

    try:
        # Get user's translation history
        history = await db.get_user_history(callback.from_user.id, limit=100)

        if not history:
            await callback.message.edit_text(
                "üìÑ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.",
                reply_markup=get_main_menu_keyboard(True)
            )
            return

        # Generate PDF
        pdf_data = await export_service.export_history_to_pdf(callback.from_user.id, history)

        if not pdf_data:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard(True)
            )
            return

        # Generate filename
        filename = await export_service.generate_export_filename(callback.from_user.id, 'pdf')

        # Create file for sending
        pdf_file = BufferedInputFile(pdf_data, filename=filename)

        # Send PDF file
        from datetime import datetime
        first_date = history[0]['created_at']
        last_date = history[-1]['created_at']
        first_date_str = first_date.strftime('%Y-%m-%d') if isinstance(first_date, datetime) else first_date[:10]
        last_date_str = last_date.strftime('%Y-%m-%d') if isinstance(last_date, datetime) else last_date[:10]

        await callback.message.answer_document(
            pdf_file,
            caption=f"üìö –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∏–∫\n\n"
                   f"üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {len(history)}\n"
                   f"üìÖ –°–æ–∑–¥–∞–Ω: {first_date_str} - {last_date_str}\n\n"
                   f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ!"
        )

        # Update main menu
        await callback.message.edit_text(
            "‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=get_main_menu_keyboard(True)
        )

        await callback.answer("üìÑ PDF –≥–æ—Ç–æ–≤!")

    except Exception as e:
        logger.error(f"PDF export error: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞.",
            reply_markup=get_main_menu_keyboard(True)
        )
        await callback.answer()

@router.callback_query(F.data == "export_txt")
async def export_txt_handler(callback: CallbackQuery):
    """Export history to TXT"""
    user_info = await db.get_user(callback.from_user.id)

    if not user_info.get('is_premium'):
        await callback.answer("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏", show_alert=True)
        return

    # Show processing message
    await callback.message.edit_text("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é TXT —Ñ–∞–π–ª...")

    try:
        # Get user's translation history
        history = await db.get_user_history(callback.from_user.id, limit=100)

        if not history:
            await callback.message.edit_text(
                "üìù –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.",
                reply_markup=get_main_menu_keyboard(True)
            )
            return

        # Generate TXT
        txt_data = await export_service.export_history_to_txt(callback.from_user.id, history)

        if not txt_data:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TXT —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard(True)
            )
            return

        # Generate filename
        filename = await export_service.generate_export_filename(callback.from_user.id, 'txt')

        # Create file for sending
        txt_file = BufferedInputFile(txt_data, filename=filename)

        # Send TXT file
        from datetime import datetime
        first_date = history[0]['created_at']
        last_date = history[-1]['created_at']
        first_date_str = first_date.strftime('%Y-%m-%d') if isinstance(first_date, datetime) else first_date[:10]
        last_date_str = last_date.strftime('%Y-%m-%d') if isinstance(last_date, datetime) else last_date[:10]

        await callback.message.answer_document(
            txt_file,
            caption=f"üìù –í–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∏–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
                   f"üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {len(history)}\n"
                   f"üìÖ –°–æ–∑–¥–∞–Ω: {first_date_str} - {last_date_str}\n\n"
                   f"üí° –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ!"
        )

        # Update main menu
        await callback.message.edit_text(
            "‚úÖ TXT —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=get_main_menu_keyboard(True)
        )

        await callback.answer("üìù TXT –≥–æ—Ç–æ–≤!")

    except Exception as e:
        logger.error(f"TXT export error: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TXT —Ñ–∞–π–ª–∞.",
            reply_markup=get_main_menu_keyboard(True)
        )
        await callback.answer()

@router.callback_query(F.data == "export_format")
async def export_format_handler(callback: CallbackQuery):
    """Show export format selection"""
    user_info = await db.get_user(callback.from_user.id)

    if not user_info.get('is_premium'):
        await callback.answer("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏", show_alert=True)
        return

    await callback.message.edit_text(
        "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
        "‚Ä¢ **PDF** - –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n"
        "‚Ä¢ **TXT** - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
        reply_markup=get_export_format_keyboard(),
        parse_mode='Markdown'
    )
    await callback.answer()